fe assemble
assemble ( )
assemble (M, C)

    Computes and returns the global stiffness matrix by computing the local
    stiffness matrices and assembling them into the global matrix.  For
    transient problems, if M is specified then it will contain the global
    mass matrix on return.  Similarly, C will contain the global damping
    matrix.  All matrices are compact.


fe clear_nodes
clear_nodes ( )

    Clears the displacements and equivalent nodal force vectors for all
    nodes in the current problem.


fe compute_modes
compute_modes (K, M)
compute_modes (K, M, X)

    Compute the modes for the given stiffness matrix, K, and mass matrix, M.
    The result is the vector of eigenvalues.  If X is specified then it will
    contain the matrix of eigenvectors upon return.


fe compute_stresses
compute_stresses (e)

    Not available yet.


fe construct_forces
construct_forces ( )
construct_forces (t)

    Constructs and returns the global nodal force vector based on all nodal
    forces and the global DOFs active at those nodes.  For transient
    problems, t may be a scalar expression used to specify the current time.
    If t is missing then it is assumed to be zero.


fe find_dofs
find_dofs ( )

    Computes the set of active DOFs for the current problem.  As a result,
    the DOF-related fields of the problem structure are initialized.  The
    number of active DOFs is returned.


fe global_dof
global_dof (n, d)

    Returns the global DOF corresponding to a local DOF.  The local DOF is
    specified by its node, n, and the DOF, d.  The node may be specified as
    either a node object or a node number.


fe integrate_hyperbolic
integrate_hyperbolic (K, M, C)
integrate_hyperbolic (K, M, C, p)

    Solves the discrete equation of motion, Ma + Cv + Kd = F, using
    Newmark's method with the Hilbert-Hughes-Taylor alpha correction for
    improved accuracy with numerical damping.  The result is a matrix of
    nodal displacements, with each column corresponding to a single time
    step.  If the nodes have been renumbered then p should be used to
    specify the permutation vector.  The sizes of the matrices must be
    consistent with the definition of the problem.  Compact matrices are
    expected.


fe integrate_parabolic
integrate_parabolic (K, M)
integrate_parabolic (K, M, p)

    Solves the discrete parabolic differential equation Mv + Kd = F using a
    generalized trapezoidal method.  If the nodes have been renumbered then
    p should be used to specify the permutation vector.  The sizes of the
    matrices must be consistent with the definition of the problem.  Compact
    matrices are expected.


fe local_dof
local_dof (g)
local_dof (g, l)

    Returns the number of the node corresponding to the global DOF, g.  If l
    is specified the it will contain the local DOF on return.  (The number
    of the node is returned rather than the node object itself since the
    nodes may have been renumbered.)


fe remove_constrained
remove_constrained (K)

    Removes the rows and columns of K at all DOFs with a fixed boundary
    condition and returns the new matrix.  K is not modified.  K should with
    be either a symmetric matrix or a column vector.  The size of K must be
    consistent with the definition of the problem.


fe renumber_nodes
renumber_nodes ( )

    Renumbers the nodes of the current problem using the
    Gibbs-Poole-Stockmeyer and Gibbs-King node renumbering algorithms for
    bandwidth and profile reduction.  The result is a permutation vector of
    the node numbers.


fe restore_numbers
restore_numbers (p)

    Restores the original node numbering of the current problem.  The
    permutation vector is specified by p.  The return value is always null.


fe set_up
set_up (e)
set_up (e, s)

    Not available yet.


fe solve_displacements
solve_displacements (K, f)

    Solves the linear system Kd = f for the vector of global nodal
    displacements.  The sizes of the inputs must be consistent with the
    definition of the problem.  Additionally, K and f should both be
    condensed.  K is expected to be compact.


fe zero_constrained
zero_constrained (K)

    Zeroes the rows and columns of K at all DOFs with a fixed boundary
    condition and returns the new matrix.  K is not modified.  K should with
    be either a symmetric matrix or a column vector.  If K is a matrix then
    a one is placed on the corresponding diagonal.  The size of K must be
    consistent with the definition of the problem.


